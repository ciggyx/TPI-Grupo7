
@startuml maquinaEstadoEventoSismico
hide empty description
'Casos de uso:
'23: Registrar resultado de revisión manual
'24: Registrar evento sísmico
'25: Modificar evento sísmico
'27: Anular evento sísmico
'38: Verificar eventos sísmicos auto detectados
'39: Cerrar evento sísmico
'67: Registrar resultado de revisión de un evento sismico derivado

[*]-->AutoDetectado : 24. \n new() [magnitudSismo < 4.0]
[*]-->AutoConfirmado : 24. \n new() [magnitudSismo >= 4.0]
AutoDetectado-->PendienteRevision :  25. \n revisar() \n [tiempoEspera=5min] 
PendienteRevision-->BloqueadoRevision: 25 \n bloquearRevision() [revisionSi=Si \n & tiempoEspera<5min]
PendienteRevision-->EventoSinRevision: 27. bloquearRevision() [revisionSi=No \n & tiempoEspera=5min]
AutoDetectado --> BloqueadoRevision: 25. \n revisar() \n [tiempoEspera<5min]
BloqueadoRevision-->Confirmado: 23.\n confirmarDirecto()
BloqueadoRevision-->Rechazado:  23.\n rechazarRevision()
BloqueadoRevision-->DerivadoExperto:  23.\n derivar()
DerivadoExperto-->Confirmado: 67. \n confirmarDerivado()
DerivadoExperto-->Rechazado: 67. \n rechazarDerivado()
Confirmado-->PendienteCierre: 23. \n pendienteCerrar()
AutoConfirmado-->PendienteCierre: 24.\n pendienteCerrar()
PendienteCierre --> Cerrado: 39. \n cerrar()
Cerrado --> [*]
EventoSinRevision --> [*]
Confirmado --> [*]
Rechazado --> [*]
@enduml

@startuml Parte_Dinámica_CU_23
skinparam roundcorner 20
skinparam maxmessagesize 60
autonumber
actor "__:AnalistaEnSismos__" as AES
create boundary "__:PantallaRegistrarResultado__" as PRR
AES --> PRR:opcRegistrarResultadoManual()
PRR -> PRR:abrirVentana()
create control "__:GestorRegistrarResultado__" as GRR
PRR --> GRR: newRevisiónManual()
GRR -> GRR: buscarEventosSísmicosSinRevision()
loop Eventos Sísmicos Auto Detectados
else Mientras existan eventos sísmicos
    entity "__:EventoSísmico__" as ES #LightCoral
    GRR --> ES: esPendienteRevisión()
    entity "__Evento:Estado__" as E
    ES --> E:  sosPendienteRevisión()
    GRR --> ES:  esAutodetectado()
    ES --> E:  sosAutodetectado()
    GRR -> ES: getDatos()
    ES -> ES: getFechaHoraOcurrenciaEvento()
    ES -> ES: getLatitudEpicentro()
    ES -> ES: getLongitudEpicentro()
    ES -> ES: getLatitudHipocentro()
    ES -> ES: getLongitudHipocentro()
end
GRR -> GRR: ordenarEventosSísmicos()
GRR -> PRR:  solicitarSelecciónEventoSísmico()
AES -> PRR:  tomarSelecciónEventoSísmico()
PRR -> GRR:  tomarSelecciónEventoSísmico()
GRR -> GRR:  buscarEstadoBloqueadoEnRevision()
entity "__:Estado__" as Es #LightCoral
loop Buscar estado bloqueado en revisión
else Mientras existan estados
    GRR -> Es: sosÁmbitoEventoSísmico()
    GRR -> Es: sosBloqueadoEnRevisión()
end
GRR -> GRR : getFechaHoraActual()
GRR -> GRR : buscarEmpleadoLogueado()
entity "__Actual:Sesión__" as ASS
GRR -> ASS : getUsuarioLogueado()
entity "__Logueado:Usuario__" as US
ASS -> US: getEmpleado()
GRR -> GRR: bloquearEventoSísmico()
entity "__Selecc:EventoSísmico__" as SES
GRR -> SES: bloquearEventoSísmico() 
loop Buscar último cambio estado
else Mientras existan cambios de estado
    entity "__:CambioEstado__" as CE #LightCoral
    SES -> CE: esEstadoActual() 
end
entity "__Actual:CambioEstado__" as ACE
SES -> ACE : setFechaHoraFin()
SES -> SES: crearCambioEstado()
create entity "__Bloqueado:CambioEstado__" as NCE
SES --> NCE: new()
SES -> SES : setEstado()
GRR -> GRR:  buscarDatosSísmicos()
GRR -> SES : getDatosSísmicos()
entity "__:AlcanceSismo__" as AS
SES -> AS: getNombre()
entity "__:ClasificaciónSismo__" as CS
SES -> CS:  getNombre()
entity "__:OrigenDeGeneración__" as OG
SES -> OG: getNombre()
loop Valores alcanzados sísmo
else Mientras existan series temporales
    entity "__:SerieTemporal__" as ST #LightCoral
    SES --> ST:  getDatos()
    loop Valores muestras sísmicas
    else Mientras existan muestras sísmicas
        entity "__:MuestraSísmica__" as MS
        ST --> MS:  getDatos()
        loop Valores detalle muestras sísmicas
        else Mientras existan detalles muestras sísmicas
            entity "__:DetalleMuestraSísmica__" as DMS
            MS --> DMS:  getDatos()
            entity "__:TipoDeDato__" as TD
            DMS --> TD:  getDenominación()
            DMS -> TD:  getNombreUnidadMedida()
            DMS -> TD:  getValorUmbral()
            
        end
    end
end
GRR -> GRR:buscarDatosEstacion()
GRR ->ST: getEstacionSismografica()
loop Buscar Sismografo
else mientras haya sismografos
entity "__:Sismografo__" as S #LightCoral
ST->S: sosMiSismografo()
ST->S: getDatosEstacion()

entity "__Sismografo:Estacion Sismologica__" as SSE
S-> SSE:getNombre()
S->SSE:getCodigo()
end
GRR->GRR: ordenarPorCodigo()

GRR -> GRR:  llamarCUGenerarSismograma()
entity "__:CuGenerarSismograma__" as CGS #LightBlue
GRR --> CGS:<<include>>

GRR->PRR: mostrarDatos()

GRR -> PRR:solicitarSelecciónMapa()
AES -> PRR:tomarSelecciónMapa()
PRR -> GRR:tomarSeleccionMapa()

 GRR -> PRR:solicitarModificaciónDatosES()
 AES -> PRR:tomarModificaciónDatosES()
 PRR -> GRR:tomarModificaciónDatosES()

 GRR -> PRR:solicitarAcciónSobreEvento()
 AES -> PRR:tomarAcciónSobreEvento()
 PRR -> GRR:tomarAcciónSobreEvento()

 GRR -> GRR:validarDatos()

 GRR -> SES:rechazarEvento()
 

loop Buscar estado bloqueado en revisión
else Mientras existan estados
    GRR -> Es: sosÁmbitoEventoSísmico()
    GRR -> Es: sosRechazado()
end
GRR -> GRR :getFechaHoraActual()
GRR -> GRR:RechazarEventoSísmico()
entity "__Selecc:EventoSísmico__" as SES
GRR -> SES: RechazarEventoSísmico()
SES->NCE: setFechaHoraFin()

GRR -> GRR: generarSismograma()
create participant "GenerarSismograma" as GS
GRR -> GS : generarSismograma()
GS -> GS : crearCambioEstado()
entity "__Rechazado:Cambio Estado__" as RCE
GS --> RCE: new()

GRR -> GRR:finCU()
@enduml

@startuml Parte_Estática_CU_23
hide <<Entity>> circle
hide <<Boundary>> circle
hide <<Control>> circle
class PantallaRegistrarRevisión<<Boundary>>{
    - opcCancelar
    - lblFechaHoraOcurrencia
    - lblLatitudEpicentro
    - lblLongitudEpicentro
    - lblLatidudHipocentro
    - lblLongitudHipocentro
    - opcVisualizarMapa
    - inputMagnitud
    - inputAlcance
    - inputOrigenGeneración
    - opcNoModificarDatos
    - opcConfirmarEvento
    - opcRechazarEvento
    - opcSolicitarRevisiónAExperto
    + 1. opcRegistrarResultadoManual()
    + 2. abrirVentana()
    + 16. solicitarSelecciónEventoSísmico()
    + 17. tomarSeleccionEventoSismico()
    + 53. mostrarDatos()
    + 54. solicitarSelecciónMapa()
    + 55. tomarSeleccionMapa()
    + 57. solicitarModificacionDatosES()
    + 58. tomarModificaciónDatosES()
    + 60. solicitarAcciónSobreEvento()
    + 61. tomarAcciónSobreEvento()
}

class GestorRegistrarRevisión<<Control>>{
    - fechaHoraOcurrencia
    - latitudEpicentro
    - longitudEpicentro
    - latidudHipocentro
    - longitudHipocentro
    - eventoSísmico
    - eventoSísmicoSeleccionado
    - fechaHoraActual
    - ASLogueado
    + 3. newRevisiónManual()
    + 4. buscarEventosSísmicosSinRevision()
    + 15. ordenarEventosSísmicos()
    + 18. tomarSelecciónEventoSísmico()
    + 22. getFechaHoraActual()
    + 23. buscarEmpleadoLogueado()
    + 26. bloquearEventoSismico()
    + 19. buscarEstadoBloqueadoEnRevision()
    + 33. buscarDatosSismicos()
    + 44. buscarDatosEstacion()
    + 50. ordenarPorCodigo() 
    + 51. llamarCUGenerarSismograma()
    + 56. tomarSelecciónMapa()
    + 59. tomarModificaciónDatosES()
    + 62. tomarAcciónSobreEvento()
    + 63. validarDatos()
    + 65. obtenerASLogueado()
    + 68. rechazarEventoSismico()
    + 73. finCU()
}

class EventoSísmico<<Entity>>{
    - estado
    - fechaHoraOcurrencia
    - latitudEpicentro
    - longitudEpicentro
    - latidudHipocentro
    - longitudHipocentro
    - cambioEstado
    - alcance
    - clasificación
    - origen
    - serieTemporal
    + 5. esPendienteRevisión()
    + 7. esAutodetectado()
    + 9. getDatos()
    + 10. getFechaHoraOcurrenciaEvento()
    + 11. getLatitudLepicentro()
    + 12. getLongitudEpicentro()
    + 13. getLatitudHipocentro()
    + 14. getLongitudHipocentro()
    + 27. bloquearEventoSísmico()
    + 30. crearCambioEstado()
    + 32. setEstado()
    + 33. getDatosSísmicos()
    + 69. rechazarEventoSísmico()
}

class Estado<<Entity>>{
    - ámbito
    - nombre
    + 6. sosPendienteRevisión()
    + 8. sosAutodetectado()
    + 20. sosÁmbitoEventoSísmico()
    + 21. sosBloqueadoEnRevisión()
    + 66. sosRechazado()
    + 49. new()
}

class CambioEstado<<Entity>>{
    - estado
    - fechaHoraInicio
    - ASLogueado
    + 28. esEstadoActual()
    + 29. setFechaHoraFin()
    + 31. new()
}

class AlcanceSismo<<Entity>>{
    - nombre
    + 35. getNombre()
}

class ClasificaciónSismo<<Entity>>{
    - nombre
    + 36. getNombre()
}

class OrigenDeGeneración<<Entity>>{
    - nombre
    + 37. getNombre()
}

class SerieTemporal<<Entity>>{
    - muestraSísmica
    + 38. getDatos()
    + 45. getEstaciónSismográfica()
}

class MuestraSísmica<<Entity>>{
    - detalleMuestraSísmica
    + 39. getDatos()
}

class DetalleMuestraSísmica<<Entity>>{
    - tipoDeDato
    + 40. getDatos()
}

class TipoDeDato<<Entity>>{
    - denominación
    - nombreUnidadMedida
    - valorUmbral
    + 41. getDenominación()
    + 42. getNombreUnidadMedida()
    + 43. getValorUmbral()
}

class Sesion<<Entity>>{
    -fechaHoraInicio
    -fechaHoraFin
    + 24. getUsuarioLogueado()
}

class Usuario<<Entity>>{
    + 25. getEmpleado()
}

class Sismografo<<Entity>>{
    + 46. sosMiSismográfo()
    + 47. getDatosEstación()
}

class EstaciónSismológica<<Entity>>{
    + 48. getNombre()
    + 49. getCódigo()
}

GestorRegistrarRevisión ..> Sesion
Sesion -->"1" Usuario
Usuario -->"1" Empleado

PantallaRegistrarRevisión ..> GestorRegistrarRevisión

GestorRegistrarRevisión ..> PantallaRegistrarRevisión
GestorRegistrarRevisión ..> EventoSísmico
GestorRegistrarRevisión ..> Empleado

EventoSísmico --> "1" Estado
EventoSísmico --> "1..*" CambioEstado
EventoSísmico --> "1" AlcanceSismo
EventoSísmico --> "1" ClasificaciónSismo
EventoSísmico --> "1" OrigenDeGeneración
EventoSísmico --> "1..*" SerieTemporal

CambioEstado --> "1" Empleado

SerieTemporal o.. "1..*" MuestraSísmica

MuestraSísmica o.. "1..*" DetalleMuestraSísmica

DetalleMuestraSísmica --> "1" TipoDeDato

@enduml 